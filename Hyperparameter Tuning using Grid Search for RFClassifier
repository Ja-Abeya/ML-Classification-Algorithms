import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
df = pd.read_csv('train.csv')

# Assuming the target variable is named 'target_class'
target_class = 'target_class'

# Assuming you have selected relevant features for prediction
feature_columns = ['feature1', 'feature2', 'feature3']

# Create feature matrix (X) and target vector (y)
X = df[feature_columns]
y = df[target_class]

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Hyperparameter Tuning using Grid Search for Random Forest Classifier
param_grid = {
    'n_estimators': [50, 100, 200],
    'max_depth': [None, 10, 20],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4],
    'criterion': ['gini', 'entropy']
}

grid_search = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=5, scoring='accuracy')
grid_search.fit(X_train, y_train)

best_rf_classifier = grid_search.best_estimator_
y_pred_best_rf = best_rf_classifier.predict(X_test)

# Evaluate the best Random Forest Classifier model
accuracy_best_rf = accuracy_score(y_test, y_pred_best_rf)
print(f'Best Random Forest Classifier Accuracy: {accuracy_best_rf}')

# Display classification report and confusion matrix for the best Random Forest Classifier model
print('Classification Report:')
print(classification_report(y_test, y_pred_best_rf))

print('Confusion Matrix:')
sns.heatmap(confusion_matrix(y_test, y_pred_best_rf), annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('
